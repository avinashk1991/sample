{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates SQS Queue, Role, Policy and Lmabda Function",
  "Parameters": {
     "Queue": {
      "Description": "Name of Queue",
      "Type": "String",
      "Default": "SampleQueue"
    },
        "StackName": {
      "Description": "Name of Stack",
      "Type": "String",
      "Default": "SQSLambda"
    },
        "Environment": {
      "Description": "Environment for the Stack",
      "Type": "String",
      "Default": "dev-def"
    },
         "DelaySeconds": {
      "Description": "The time in seconds that the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900 (15 minutes).",
      "Type": "Number",
      "Default": "0"
    },
      "MaximumMessageSize": {
        "Type":"Number",
      "Description": "The limit of how many bytes that a message can contain before Amazon SQS rejects it, 1024 bytes (1 KiB) to 262144 bytes (256 KiB)",
      "Default": "262144"
    },
     "MessageRetentionPeriod": {
      "Description": "The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). ",
      "Type": "Number",
      "Default": "1209600"
    },
     "ReceiveMessageWaitTimeSeconds": {
      "Description": "Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, as opposed to returning an empty response if a message is not yet available. 1 to 20",
      "Type": "Number",
      "Default": "0"
    },
     "UsedeadletterQueue": {
      "Description": "A dead-letter queue is a queue that other (source) queues can target for messages that can't be processed (consumed) successfully. You can set aside and isolate these messages in the dead-letter queue to determine why their processing doesn't succeed.",
      "Type": "String",
      "AllowedValues":["true","false"],
      "Default": "true"
    },
     "VisibilityTimeout": {
      "Description": "This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours.",
      "Type": "Number",
      "Default": "1800"
    },
    "SubnetCIDR": {
      "Description" : "Lockdown SSH access to the VPC CIDR Block",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "162.246.218.28/32",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
      "VPCSecurityGroupIDs": {
         "Description": "An comma-delimited list of strings - the security groups that your Lambda function and cache cluster should be in",
         "Type": "CommaDelimitedList"
      },
      "VPCSubnetIDs": {
         "Description": "An comma-delimited list of strings - the subnet IDs that your Lambda function should be assigned to",
         "Type": "CommaDelimitedList"
      },
      "VPCID": {
         "Description": "VPC ID for Environment",
         "Type": "String"
      }

  },
  "Mappings": {},
  "Conditions": {
    "CreateDeadLetterQueue" : {"Fn::Equals" : [{"Ref" : "UsedeadletterQueue"}, "true"]}
    },
  "Resources": {

    "SQSQueue":{
   "Type" : "AWS::SQS::Queue",
   "Properties" : {
      "QueueName":{"Fn::Join" : [ "-", [ {"Ref":"Environment"}, "InputQueue", {"Ref":"Queue"} ] ]},
      "DelaySeconds": {"Ref":"DelaySeconds"},
      "MaximumMessageSize": {"Ref":"MaximumMessageSize"},
      "MessageRetentionPeriod": {"Ref":"MessageRetentionPeriod"},
      "ReceiveMessageWaitTimeSeconds":{"Ref":"ReceiveMessageWaitTimeSeconds"},
      "RedrivePolicy": {
      "Fn::If" : [
        "CreateDeadLetterQueue",
        {
          "deadLetterTargetArn" : {"Fn::GetAtt" : [ "MyDeadLetterQueue" , "Arn" ]},
          "maxReceiveCount" : 10
        },
        {
        "Ref" : "AWS::NoValue"
      }
      ]
    },
     "VisibilityTimeout": {"Ref":"VisibilityTimeout"}
   }
},
"MyDeadLetterQueue" : {
          "Condition" : "CreateDeadLetterQueue",
          "Type" : "AWS::SQS::Queue",
          "Properties" : {
                "QueueName":{"Fn::Join" : [ "-", [ {"Ref":"Environment"}, "DeadQueue", {"Ref":"Queue"} ] ]},
                "MessageRetentionPeriod": {"Ref":"MessageRetentionPeriod"}
          }
    },
        "LambdaRolePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : {"Fn::Join" : [ "-", [ {"Ref":"Environment"}, {"Ref":"Queue"} , "Policy" ] ]},
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Action" : [
                "sqs:*",
                "cloudwatch:*",
                "logs:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface"
              ],
              "Resource" : "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "LambdaRole"
          }
        ]
      }
    },
    "LambdaRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
            "RoleName" : {"Fn::Join" : [ "-", [ {"Ref":"Environment"}, {"Ref":"Queue"} , "Role" ] ]},
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : ["lambda.amazonaws.com"]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/service-role/"
      }
    },
          "LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join" : [ "", [{ "Ref" : "Environment" }, " Queue"]]},
        "GroupName": { "Fn::Join" : ["", [{ "Ref" : "Environment" }," Queue", " Lambda Security Group"]]},
        "VpcId" :  { "Ref" : "VPCID" },
        "SecurityGroupIngress": [
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80", "CidrIp" : { "Ref" : "SubnetCIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : { "Ref" : "SubnetCIDR" }}
        ],
        "Tags" :[
        { "Key" : "Name", "Value": { "Fn::Join" : [ "sg-", [{ "Ref" : "Queue" }]]}}
      ]

      }
    },
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join" : [ "", [ {"Ref":"Environment"}, "-", {"Ref":"Queue"} , "" ] ]
                },
                "Description": "Lambda Function of nodejs",
                "Runtime": "nodejs6.10",
                "Code": {
                    "ZipFile": { "Fn::Join": ["", [
                                                                  "exports.handler = function(event, context) {",
                                                                  "console.log('Hello, Cloudwatch!');",
                                                                  " context.succeed('Hello, World!');",
                                                                  "};"
                                                                ]]}
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Timeout": 10,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "VpcConfig": {
                        "SecurityGroupIds": { "Ref": "VPCSecurityGroupIDs" },
                        "SubnetIds": { "Ref": "VPCSubnetIDs" }
                },
                "Environment": {
                    "Variables": {
                        "NODE_ENV": {"Ref":"Environment"}
                    }
                }
            }
        }
  },
  "Outputs": {
    "QueueURL" : {
      "Description" : "URL of newly created SQS Queue",
      "Value" : { "Ref" : "SQSQueue" }
    },
    "QueueARN" : {
      "Description" : "ARN of newly created SQS Queue",
      "Value" : { "Fn::GetAtt" : ["SQSQueue", "Arn"]}
    },
    "QueueName" : {
      "Description" : "Name newly created SQS Queue",
      "Value" : { "Fn::GetAtt" : ["SQSQueue", "QueueName"]}
    },
    "DeadLetterQueueURL" : {
      "Condition" : "CreateDeadLetterQueue",
      "Description" : "URL of the dead letter queue",
      "Value" : { "Ref" : "MyDeadLetterQueue" }
    },
    "DeadLetterQueueARN" : {
      "Condition" : "CreateDeadLetterQueue",
      "Description" : "ARN of the dead letter queue",
      "Value" : { "Fn::GetAtt" : ["MyDeadLetterQueue", "Arn"]}
    }
  }
}
